<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Control Files</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1> 
 Control Files</H1>
<P> 
 A <STRONG>FIGfont</STRONG> <STRONG>control file</STRONG> 
is a separate text file, associated with one or more <STRONG>FIGfonts</STRONG>, 
that indicates how to map input characters into <STRONG>FIGfont</STRONG> 
character codes. By default, <STRONG>FIGdrivers</STRONG> read single bytes from 
the input source and interpret them as Latin-1 
<STRONG>FIGcharacters</STRONG>.</P>
<P><STRONG>FIGlet</STRONG> version 2.2 (and later) can optionally interpret its 
input as DBCS or UTF-8 characters, making it possible to access 
<STRONG>FIGcharacters</STRONG> with codes outside the Latin-1 range (greater 
than 255).</P>
<P>In addition, though, all versions of <STRONG>FIGlet</STRONG> can use 
<STRONG>control files</STRONG> to transform specific character codes (or ranges 
of codes) as other codes (or ranges).&nbsp;Multiple control files can be 
specified, in which case multiple stages of transformation are performed.</P>The 
filename of a <STRONG>control file</STRONG> always ends with ".flc".
<H3>Control File Format</H3>
<P><STRONG>Control files</STRONG> contain several kinds of lines.&nbsp;Lines 
beginning with "#", as well as blank lines, are comment lines and are ignored. 
All other lines are command lines, with one of the following formats:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=10 cols=120 readOnly>    t inchar outchar
    t inchar1-inchar2 outchar1-outchar2
    number number
    f
    h
    j
    b
    u
    g{0|1|2|3} {94|96|94x94} [char]
    g{L|R} {0|1|2|3}
</TEXTAREA></P>
<P>where "inchar", "outchar", and "char" are either Latin-1 
characters representing their own codes, or else are numeric character codes 
preceded by a "\" character; and "number" is a numeric character code with no 
preceding "\" character.</P>
<P>Thus "A" represents the code 65, as does "\65", and "\0x100" represents the 
code 256 (100 in hexadecimal).&nbsp; In addition, "\ " (backslash followed by a 
space) represents the code 32 (space), and the following backslash sequences are 
also understood:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=8 cols=120 readOnly>    \a        code 7 (a bell/alert)
    \b        code 8 (a backspace)
    \e        code 27 (an ESC character)
    \f        code 12 (a form feed)
    \n        code 10 (a newline/line feed)
    \r        code 13 (a carriage return)
    \t        code 9 (a horizontal tab)
    \v        code 11 (a vertical tab)
    \\        code 92 (a backslash)
</TEXTAREA></P>
<P>All of these combinations except perhaps "\\" are very 
unlikely to be used, but they are provided just in case they are needed.</P>
<P>Whitespace characters are used between "t" and "inchar" and between "inchar" 
and "outchar", but not around the "-" characters used in the second type of "t" 
command.</P>
<P>The term "string" refers to any number of characters represented in the 
format given above.&nbsp;The characters begin after the whitespace following the 
letter "s", and continue to the end of the line.</P>
<P>Anything following the first letter of an "f", "h", "j", or "u" command is 
ignored.</P>
<P>The first type of "t" command transforms characters with the code "inchar" 
into characters with the code "outchar". The second type of "t" command 
transforms characters in the range "inchar1" to "inchar2" as the corresponding 
codes in the range "outchar1" to "outchar2". Both ranges must be of the same 
size. The form "number number" is equivalent to a "t" command of the first type, 
and is provided for compatibility with the mapping tables issued by the Unicode 
Consortium.</P>
<P>Multiple transformation stages can be encoded in a 
single <STRONG>control file</STRONG> by using "f" commands to separate the 
stages.</P>
<P>Versions of <STRONG>FIGlet</STRONG> before 2.1 required that the first line 
of a <STRONG>control file</STRONG> consist of the signature string 
"flc2a".&nbsp;This signature line is still permitted in <STRONG>FIGlet 
2.2</STRONG> and later versions, but is no longer required.</P>
<P>Here is an example of a <STRONG>control file</STRONG>.&nbsp;The blanks at the 
beginning of each line are for readability only, and are not part of the 
file.</P>
<P>The following <STRONG>control file</STRONG>   :</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=3 cols=120 readOnly>    flc2a
    t # $
    t A-Z a-z
</TEXTAREA></P>
<P>will map the "#" character to "$", and will also convert 
uppercase ASCII to lowercase ASCII.</P>
<P>If a number of consecutive "t" commands are given, then 
for each character processed, only the first applicable command (if any) will be 
executed.</P>
<P>Consider this <STRONG>control file</STRONG>:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" cols=120 readOnly>    t A B
    t B A
</TEXTAREA></P>
<P>It will swap the characters "A" and "B".&nbsp;If the 
<STRONG>FIGdriver</STRONG> reads an "A", the first command will change "A" to 
"B", in which case the second will not be executed.&nbsp;If the 
<STRONG>FIGdriver</STRONG>     reads a "B", the first command 
will have no effect, and the second command will change "B" to 
"A".</P>
<P>Here is another <STRONG>control file</STRONG>:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" cols=120 readOnly>    t A B
    t A C
</TEXTAREA></P>
<P>In this example, the second line is never executed.&nbsp;In short, a sequence 
of "t" lines "does what it ought to".</P>
<P>More complex files, in which a single character is acted upon by several "t" 
commands, can be set up using an "f" command. For example:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=4 cols=120 readOnly>    flc2a
    t a-z A-Z
    f
    t Q ~
</TEXTAREA></P>
<P>This <STRONG>control file</STRONG> specifies two 
transformation stages.&nbsp;In the first stage, lowercase ASCII letters are 
changed to their uppercase equivalents.&nbsp;The second stage maps any Q 
(whether original or a converted "q") into the "~" character. If the "f" command 
were omitted, "q" characters would remain "Q" and not be converted to 
"~".</P>
<H3>Extended Commands</H3>
<P>The "h", "j", "b", "u", and "g" commands are only 
understood by <STRONG>FIGlet</STRONG> version 2.2 or later.&nbsp;They control 
how a <STRONG>FIGdriver</STRONG> interprets bytes in the input. By default, the 
<STRONG>FIGdriver</STRONG> interprets each byte of input as a distinct 
character.&nbsp;This mode is suitable for most character encodings.&nbsp;All 
these commands are logically acted on before any other control file commands, no 
matter where in the sequence of control files they appear. They are also 
mutually exclusive; if more than one of these commands is found, only the last 
is acted on. Multiple "g" commands are permitted, however.</P>
<P>The "h" command forces the input to be interpreted in HZ 
mode, which is used for the HZ character encoding of Chinese text. In this 
mode, the sequence "~{" (which is removed from 
the input) signals that all following characters are two bytes long until the 
sequence "~}" is detected. In addition, the sequence "~~" is changed to just 
"~", and all other two-byte sequences beginning with "~" are removed from the input. 
The character code corresponding to a two-byte character is:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>	first character * 256 + second character
</TEXTAREA></P>
<P>The "j" command forces the input to be interpreted in 
Shift-JIS mode (also called "MS-Kanji mode").&nbsp;Input bytes in the ranges 
128-159 and 224-239 are read as the high-order byte of a two-byte character; all 
other bytes are&nbsp;interpreted as one-byte characters.&nbsp;The value of a 
two-byte character is determined in the same way as in HZ mode.</P>
<P>The "b" command forces the input to be interpreted in 
DBCS mode, which is suitable for processing HZ or Shift-GB Chinese text or 
Korean text. Input bytes in the ranges 128-255 are read as the high-order byte 
of a two-byte character; all other bytes are interpreted as one-byte 
characters.&nbsp;The value of a two-byte character is determined in the same way 
as in HZ mode.</P>
<P>The "u" command forces the input to be interpreted in 
UTF-8 mode, which causes any input byte in the range 0x80 to 0xFF to be 
interpreted as the first byte of a multi-byte Unicode (ISO 10646) 
character.&nbsp;UTF-8 characters can be from 1 to 6 bytes long.&nbsp;An 
incorrectly formatted sequence is interpreted as the character 128 (normally an 
unused control character).</P>
<P>Otherwise, the input is allowed to contain ISO 2022 escape sequences, which 
are decoded to generate appropriate character codes.&nbsp;These character codes 
are <EM>not</EM> a subset of Unicode, but may be more useful in processing East 
Asian text.&nbsp;A brief explanation of ISO 2022 is given here in order to 
clarify how a <STRONG>FIGdriver</STRONG> should interpret it.&nbsp;The "g" 
command provides information for the ISO 2022 interpreter, and is explained 
below.</P>
<P>ISO 2022 text is specified using a mixture of registered character sets. At 
any time, up to four character sets may be available.&nbsp;Character sets have 
one of three sizes:&nbsp;single-byte character sets with 94 characters (e.g. 
ASCII), single-byte character sets with 96 characters (e.g. the top halves of 
ISO Latin-1 to Latin-5), or double-byte character sets with 94 x 94 characters 
(e.g. JIS 0208X-1983).&nbsp;Each registered character set has a standard 
designating byte in the range 48 to 125; the bytes are unique within character 
set sizes, but may be reused across sizes.&nbsp; For example, byte 66 designates 
the 94-character set ASCII, the 96-character set ISO Latin-2 (top half), and the 
94 x 94 Japanese character set JIS 0208X-1983. In this document, the designating 
byte of a character set will be represented by &lt;D&gt;.</P>
<P>The four available character sets are labeled G0, G1, G2, and 
G3.&nbsp;Initially, G0 is the 94-character set ASCII, and G1 is the 96-character 
set ISO Latin-1 (top half).&nbsp;The other character sets are 
unassigned.&nbsp;The following escape sequences (where ESC = the byte 27) 
specify changes to the available character sets:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=12 cols=120 readOnly>        ESC ( &lt;D&gt;    Set G0 to the 94-character set &lt;D&gt;
        ESC ) &lt;D&gt;    Set G1 to the 94-character set &lt;D&gt;
        ESC * &lt;D&gt;    Set G2 to the 94-character set &lt;D&gt;
        ESC + &lt;D&gt;    Set G3 to the 94-character set &lt;D&gt;
        ESC - &lt;D&gt;    Set G1 to the 96-character set &lt;D&gt;
        ESC . &lt;D&gt;    Set G2 to the 96-character set &lt;D&gt;
        ESC / &lt;D&gt;    Set G3 to the 96-character set &lt;D&gt;
        ESC $ &lt;D&gt;    Set G0 to the 94 x 94 character set &lt;D&gt;
        ESC $ ( &lt;D&gt;    Set G0 to the 94 x 94 character set &lt;D&gt;
        ESC $ ) &lt;D&gt;    Set G1 to the 94 x 94 character set &lt;D&gt;
        ESC $ * &lt;D&gt;    Set G2 to the 94 x 94 character set &lt;D&gt;
        ESC $ + &lt;D&gt;    Set G3 to the 94 x 94 character set &lt;D&gt;
</TEXTAREA></P>
<P>Note that G0 may not be a 96-character set, and that 
there are two ways to specify a 94 x 94 character set in G0, of which the first 
is deprecated.</P>
<P>ISO 2022 decoding affects input bytes in the ranges 33 to 126 and 160 to 255, 
known as "the left half" and "the right half" respectively.&nbsp;All other 
bytes, unless they belong to a control sequence shown in this document, remain 
unchanged.&nbsp;Initially, the left half is interpreted as character set G0, and 
the right half as character set G1.&nbsp;This can be changed by the following 
control sequences: </P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=11 cols=120 readOnly>        SI (byte 15)    Interpret the left half as G1 characters
        SO (byte 14)    Interpret the left half as G0 characters
        ESC n           Interpret the left half as G2 characters
        ESC o           Interpret the left half as G3 characters
        ESC ~           Interpret the right half as G1 characters
        ESC }           Interpret the right half as G2 characters
        ESC |           Interpret the right half as G3 characters
        SS2 (byte 142)  Interpret next character only as G2
        ESC N           Interpret next character only as G2
        SS3 (byte 143)  Interpret next character only as G3
        ESC O           Interpret next character only as G3
</TEXTAREA></P>
<P>This rich schema may be used in various ways.&nbsp;In 
ISO-2022-JP, the Japanese flavor of ISO 2022, only the bytes 33-126 and the G0 
character set is used, and escape sequences are used to switch between ASCII, 
ISO-646-JP (the Japanese national variant of ASCII), and JIS 0208X-1983.&nbsp;In 
other versions, the G1 character set has 94 x 94 size, and so any byte in the 
range 160-255 is automatically the first byte of a double-byte character.</P>
<P><STRONG>FIGdrivers</STRONG> that support ISO 2022 do so in the following way. 
Each character i is decoded and assigned to a character set &lt;D&gt;.</P>
<UL>
  <LI>If the character belongs to a 94-bit character set, 
  then if its value exceeds 128, it is reduced by 128, and the value 65536 * 
  &lt;D&gt; is added to it, unless &lt;D&gt; is 66 (ASCII). 
  <LI>If the character belongs to a 96-bit character set, 
  then if its value is less than 128, it is increased by 128, and the value 
  65536 * &lt;D&gt; is added to it, unless &lt;D&gt; is 65 (ISO Latin-1). 
  <LI>If the character belongs to a 94 x 94 character set, 
  then the value is the sum of: the first byte * 256, plus the second byte, plus 
  the value 65536 * &lt;D&gt;.</LI></UL>
<P>Thus, the character code 65 ("A") in ASCII remains 65, 
the character code 196 in ISO Latin-1 ("A-umlaut") remains 196, the character 
code 65 (0x41) in ISO-646-JP (whose &lt;D&gt; is 74 = 0x4A) becomes 0x4A0041 = 
4849729, and the two-byte sequence 33 33 (0x21 0x21) in JIS 0208X-1983 (whose 
&lt;D&gt; is 65 = 0x41) becomes 0x412121 = 4268321.&nbsp;These codes may be used 
in compiling <STRONG>FIGfonts</STRONG> suitable for use with ISO 2022 encoded 
text.</P>
<P>The initial settings of G0 through G3 and their assignments to the left half 
and the right half can be altered in a control file by using "g" commands, as 
follows:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>        g {0|1|2|3} {94|96|94x94} [&lt;D&gt;]
</TEXTAREA></P>
<P>specifies that one of G0-G3 is a 94, 96, or 94x94 
character set with designating character &lt;D&gt;.&nbsp;If no designating 
character is specified, then a &lt;D&gt; value of zero is assumed.</P>
<P>For example, the list of control commands:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" cols=120 readOnly>        g 0 94 B
        g 1 96 A
</TEXTAREA></P>
<P>sets the G0 character set to ASCII (94-character set 
"B") and the G1 character set to the top half of Latin-1 (96-character set "A"). 
(This is the default setting).</P>
<P>To change the initial assignments of G0 to the left half and G1 to the right 
half, "g" commands of the form</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>        g {L|R} {0|1|2|3}
</TEXTAREA></P>
<P>For example, the command:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>        g R 2
</TEXTAREA></P>
<P>causes right-half bytes (in the range 160-255) to be 
interpreted as G2. Whether these bytes are interpreted singly or in pairs 
depends on the type of character set that is currently available as G2.</P>
<P>Spaces may be freely used or omitted in "g" commands.</P>
<P>The standard <STRONG>FIGlet</STRONG> distribution contains mapping tables for 
Latin-2 (ISO 8859-2), Latin-3 (ISO 8859-3), Latin-4 (ISO 8859-4), and Latin-5 
(ISO 8859-9).&nbsp;They can be used with the font "standard.flf", which contains 
all the characters used in these standards.</P>
</body>
</html>
