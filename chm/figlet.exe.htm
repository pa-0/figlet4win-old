<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>figlet.exe</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<H1>   FIGlet Main Executable&nbsp;(figlet.exe)</H1>
<H3>NAME</H3>
<P>FIGlet - display large characters made up of ordinary 
screen characters.</P>
<H3>SYNOPSIS</H3>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=4 cols=120 readOnly>figlet [ -cklnoprstvxDELNRSWX ] [ -d font-directory ]
       [ -f font-file ] [ -m layout-mode ]
       [ -w output-width ] [ -C control-file ]
       [ -I info-code ] [ message ]
</TEXTAREA></P>
<H3>DESCRIPTION</H3>
<P><STRONG>FIGlet</STRONG> prints its input using large 
characters (called <EM>FIGcharacters</EM>) made up of ordinary screen characters 
(called <EM>sub-characters</EM>). <STRONG>FIGlet </STRONG>output is generally 
reminiscent of the sort of <EM>signatures</EM> many people like to put at the 
end of e-mail and UseNet messages. It is also reminiscent of the output of some 
banner programs, although it is oriented normally, not sideways.</P>
<P><STRONG>FIGlet</STRONG> can print in a variety of fonts, 
both left-to-right and right-to-left, with adjacent FIGcharacters kerned and 
<EM>smushed</EM> together in various ways. <STRONG>FIGlet</STRONG> fonts are 
stored in separate files, which can be identified by the suffix '.flf'. In 
systems with UTF-8 support <STRONG>FIGlet</STRONG> may also support TOIlet 
".tlf" font files. Most <STRONG>FIGlet</STRONG> font files will be stored in 
<STRONG>FIGlet's</STRONG> default font directory.</P>
<P><STRONG>FIGlet</STRONG> can also use <EM>control 
files</EM>, which tell it to map certain input characters to certain other 
characters, similar to the Unix <STRONG>tr</STRONG> command. Control files can 
be identified by the suffix ".flc". Most <STRONG>FIGlet</STRONG> control files 
will be stored in FIGlet's default font directory.</P>
<P>You can store <STRONG>FIGlet</STRONG> fonts and control 
files in compressed form. See <STRONG>COMPRESSED FONTS</STRONG> subsection.</P>
<H3>OPTIONS</H3>
<P><STRONG>FIGlet</STRONG> reads command line options from 
left to right, and only the last option that affects a parameter has any effect. 
Almost every option has an inverse, so that, for example, if 
<STRONG>FIGlet</STRONG> is customized with a shell <STRONG>alias</STRONG>, all 
the options are usually still available.</P>
<P>Commonly-used options are <STRONG>-f</STRONG>, 
<STRONG>-c</STRONG>, <STRONG>-k</STRONG>, <STRONG>-t</STRONG>, 
<STRONG>-p</STRONG> and <STRONG>-v</STRONG> .</P>
<UL>
  <LI>
<DIV><STRONG>-f</STRONG> <U>font-file</U> </DIV></LI></UL>
<P>Select the font. The ".flf" suffix may be left off 
<U>font-file</U>, in which case <STRONG>FIGlet</STRONG> automatically appends 
it. <STRONG>FIGlet</STRONG> looks for the file first in the default font 
directory and then in the current directory, or, if <U>font-file</U><STRONG> 
</STRONG>was given as a full pathname, in the given directory. If the 
<STRONG>-f</STRONG> option is not specified, <STRONG>FIGlet</STRONG> uses the 
font that was specified when it was compiled. To find out wich font this is, use 
the <STRONG>-I3</STRONG> option.</P>
<UL>
  <LI>
<DIV><STRONG>-d</STRONG> 
<U>font-directory</U> </DIV></LI></UL>
<P>Change the default font directory. 
<STRONG>FIGlet</STRONG> looks for fonts first in the default directory and then 
in the current directory. If the <STRONG>-d</STRONG> option is not specified, 
<STRONG>FIGlet</STRONG> uses the directory that was specified when it was 
compiled. To find out which directory this is, use the <STRONG>-I2</STRONG> 
option.</P>
<UL>
  <LI>
<DIV><STRONG>-c</STRONG>,<STRONG> -l</STRONG>,<STRONG> 
  -r</STRONG>,<STRONG> -x</STRONG></DIV></LI></UL>
<P>These options handle the justification of 
<STRONG>FIGlet</STRONG> output. <STRONG>-c</STRONG> centers the output 
horizontally. <STRONG>-l</STRONG> makes the output flush-left and 
<STRONG>-r</STRONG> flush-right. <STRONG>-x</STRONG> (default) sets the 
justification according to whether left-to-right or right-to-left text is 
selected. Left-to-right text will be flush-left, while right-to-left text will 
be flush-right. (Left-to-right versus right-to-left text is controlled by 
<STRONG>-L</STRONG>, <STRONG>-R</STRONG> and <STRONG>-X</STRONG>.)</P>
<UL>
  <LI>
<DIV><STRONG>-t</STRONG>,<STRONG> -w 
  </STRONG><U>output-width</U></DIV></LI></UL>
<P>These options control the <U>output-width</U>, or the 
screen width <STRONG>FIGlet</STRONG> assumes when formatting its output. 
<STRONG>FIGlet</STRONG> uses the <U>output-width</U> to determine when to break 
lines and how to center the output. Normally <STRONG>FIGlet</STRONG> assumes 80 
columns so that people with wide terminals won't annoy the people they email 
<STRONG>FIGlet</STRONG> output to. <STRONG>-t</STRONG> sets the 
<U>output-width</U> to the terminal width. If the terminal width cannot be 
determined, the previous <U>output-width</U> is retained. <STRONG>-w</STRONG> 
sets the <U>output-width</U> to the given integer. An <U>output-width</U> of 1 
is a special value that tells <STRONG>FIGlet</STRONG> to print each non-space 
FIGcharacter, in its entirety, on a separate line, no matter how wide it is.</P>
<UL>
  <LI>
<DIV><STRONG>-p</STRONG>, 
<STRONG>-n</STRONG></DIV></LI></UL>
<P>These options control how <STRONG>FIGlet</STRONG> 
handles newlines. <STRONG>-p</STRONG> puts <STRONG>FIGlet</STRONG> into 
<EM>paragraph mode</EM>, which eliminates some unnecessary line breaks when 
piping a multi-line file throught <STRONG>FIGlet</STRONG>. In paragraph mode, 
<STRONG>FIGlet</STRONG> treats line breaks within a paragraph as if they were 
merely blanks between words. (Spcifically, <STRONG>-p</STRONG> causes 
<STRONG>FIGlet</STRONG> to convert any newline which is not preceded by a 
newline and not followed by a space character into a blank.) <STRONG>-n</STRONG> 
(default) puts <STRONG>FIGlet</STRONG> back to normal, in which every newline 
<STRONG>FIGlet</STRONG> reads causes it to produce a line break.</P>
<UL>
  <LI>
<DIV><STRONG>-D</STRONG>, 
<STRONG>-E</STRONG></DIV></LI></UL>
<P><STRONG>-D</STRONG> switches to the German (ISO 646-DE) 
character set. Turns "[", "\" and "]" into umlauted A, O and U (Ä, Ö, Ü), 
respectively. "{", "|", and "}" turn into the respective lower case versions of 
these (ä, ö, ü). "~" turns into s-z (ß). <STRONG>-E</STRONG> turns off 
<STRONG>-D</STRONG> processing.</P>
<P>These options are deprecated, which means they probably 
will not appear in the next version of <STRONG>FIGlet</STRONG>.</P>
<UL>
  <LI>
<DIV><STRONG>-C </STRONG><U>control-file</U>, 
  <STRONG>-N</STRONG></DIV></LI></UL>
<P>These options deal with <STRONG>FIGlet</STRONG> 
<U>control-files</U>. A <U>control-file</U> is&nbsp;a file containing a list of 
commands that <STRONG>FIGlet</STRONG> executes each time it reads a character. 
These commands can map certain input characters to other characters, similar to 
the Unix <STRONG>tr</STRONG> command or the <STRONG>FIGlet -D</STRONG> option. 
<STRONG>FIGlet</STRONG> maintains a list of <U>control-file</U>, which is empty 
when <STRONG>FIGlet</STRONG> starts up. <STRONG>-C</STRONG> adds the given 
<U>control-file</U> to the list. <STRONG>-N</STRONG> clears the 
<U>control-file</U> list, cancelling the effect of any previous 
<STRONG>-C</STRONG>. <STRONG>FIGlet</STRONG> executes the commands in all 
<U>control-files</U> in the list. See&nbsp;<A 
href="FIGfont.htm">  FIGfont</A>        for details on how to 
write a <U>control-file</U>.</P>
<UL>
  <LI>
<DIV><STRONG>-s</STRONG>, <STRONG>-S</STRONG>, 
  <STRONG>-k</STRONG>, <STRONG>-W</STRONG>, <STRONG>-o</STRONG></DIV></LI></UL>
<P>These options control how <STRONG>FIGlet</STRONG> spaces 
the FIGcharacters that it outputs. <STRONG>-s</STRONG> (default) and 
<STRONG>-S</STRONG> cause <EM>smushing</EM>. The FIGcharacters are displayed as 
close together as possible,&nbsp;and overlapping sub-characters are removed. 
Exactly which sub-characters count as <EM>overlapping</EM> depends on the font's 
<U>layout-mode</U>, which is defined by the font's author. <STRONG>-k</STRONG> 
causes <EM>kerning</EM>. As many blanks as possible are removed between 
FIGcharacters, so that they touch, but the FIGcharacters are not 
<EM>smushed</EM>. <STRONG>-W</STRONG> makes <STRONG>FIGlet</STRONG> display all 
FIGcharacters at their full width, which may be fixed or variable, depending on 
the font.</P>
<P>The difference between <STRONG>-s</STRONG> and 
<STRONG>-S</STRONG> is that <STRONG>-s</STRONG> will not <EM>smush</EM> a font 
whose author specified kerning or full width as the default <U>layout-mode</U>, 
whereas <STRONG>-S</STRONG> will attempt to do so.</P>
<P>If there is no information in the font about how to 
<EM>smush</EM>, or if the <STRONG>-o</STRONG> option is specified, then the 
FIGcharacters are <EM>overlapped</EM>. This means that after kerning, the first 
subcharacter of each FIGcharacter is removed. (This is not done if a 
FIGcharacter contains only one subcharacter.)</P>
<UL>
  <LI>
<DIV><STRONG>-m</STRONG> <U>layout-mode</U></DIV></LI></UL>
<P>Specifies an explicit <U>layout-mode</U> between 1 and 
63. <U>Smush-modes</U> are explained in <A href="FIGlet_Font_Format.htm">FIGlet 
Font Format</A>, which also provides complete information on the format of a 
<STRONG>FIGlet</STRONG> font. For the sake of backward compatibility with 
versions of <STRONG>FIGlet</STRONG> before 2.2, <STRONG>-m0</STRONG> is 
equivalent to <STRONG>-k</STRONG>, <STRONG>-m-1</STRONG> is equivalent to 
<STRONG>-W</STRONG>, and <STRONG>-m-2</STRONG> is equivalent to 
<STRONG>-s</STRONG>. The <STRONG>-m</STRONG> switch is normally used only by 
font designers testing the various <U>layout-modes</U> with a new font.</P>
<UL>
  <LI>
<DIV><STRONG>-v</STRONG>, <STRONG>-I</STRONG> 
  <U>info-code</U></DIV></LI></UL>
<P>These options print various information about 
<STRONG>FIGlet</STRONG>, then exit. If several of these options are given on the 
command line, only the last is executed, and only after all other command-line 
options have been dealt with.</P>
<P><STRONG>-v</STRONG> prints version and copyright 
information, as well as a "Usage: ..." line. <STRONG>-I</STRONG> prints the 
information corresponding to the given <U>info-code</U> in a consistent, 
reliable (i.e., guaranteed to be the same in future releases) format. 
<STRONG>-I</STRONG> is primarily intended to be used by programs that use 
<STRONG>FIGlet</STRONG>. <U>Info-code</U> can be any of the following:</P>
<H4>-1 Normal operation (default).</H4>
<P>This <U>info-code</U> indicates that 
<STRONG>FIGlet</STRONG> should operate normally, not giving any informational 
printout, printing its input in the selected font.</P>
<H4>0        
     Version and copyright.</H4>
<P>This is identical to <STRONG>-v</STRONG>        
       .</P>
<H4>1        
      Version (integer).</H4>
<P>This will print the version of your copy of 
<STRONG>FIGlet</STRONG> as a decimal integer. The major version number is 
multiplied by 10000, the&nbsp;minor version&nbsp;number by 100, and build 
version number by 1. These are added together, and the result is printed out. 
For example, <STRONG>FIGlet</STRONG> 2.2 will print 
<STRONG><U>20200</U></STRONG>, version 2.2.1 will print 
<STRONG><U>20201</U></STRONG>, etc. These numbers are guaranteed to be 
ascending, with later versions having higher numbers. Note that the first major 
release of <STRONG>FIGlet</STRONG>, version 2.0, did not have the 
<STRONG>-I</STRONG>        
       option.</P>
<H4>2        
     Default font directory.</H4>
<P>This will print the default font directory. It is 
affected by the <STRONG>-d</STRONG>        
       option.</P>
<H4>3        
       Font.</H4>
<P>This will print the name of the font 
<STRONG>FIGlet</STRONG> would use. It is affected by the <STRONG>-f</STRONG>    option. This is not 
a filename; the ".flf" suffix is not printed.</P>
<H4>4        
      Output width.</H4>
<P>This will print the value <STRONG>FIGlet</STRONG> would 
use for <U>output-width</U>, the number of columns wide <STRONG>FIGlet</STRONG> 
assumes the screen is. It is affected by the <STRONG>-w</STRONG> and 
<STRONG>-t</STRONG>        
       options.</P>
<H4>5        
     Supported font formats.</H4>
<P>This will list font formats supported by 
<STRONG>FIGlet</STRONG>. Possible formats are <STRONG><U>flf2</U></STRONG> for 
FIGfont Version 2 ".flf" files and <STRONG><U>tlf2</U></STRONG>        
    for TOIlet ".tlf" files.</P>
<P>If <U>info-code</U> is any other positive value, 
<STRONG>FIGlet</STRONG>        
  will simply exit without printing anything.</P>
<UL>
  <LI>
<DIV><STRONG>-L</STRONG>, 
  <STRONG>-R</STRONG>, <STRONG>-X</STRONG>        
       </DIV></LI></UL>
<P>These options control whether <STRONG>FIGlet</STRONG> 
prints left-to-right or right-to-left. <STRONG>-L</STRONG> selects left-to-right 
printing. <STRONG>-R</STRONG> selects right-to-left printing. 
<STRONG>-X</STRONG> (default) makes <STRONG>FIGlet</STRONG> use whichever is 
specified in the font        
       file.</P>
<HR>
<P>Once the options are read, if there are any remaining 
words on the command line, they are used instead of standard input as the source 
of text. This feature allows shell scripts to generate large letters without 
having to dummy up standard input        
       files.</P>
<P>An empty argument, obtained by two sequential quotes, 
results in a line        
       break.</P>
<H3>        
           
       EXAMPLES</H3>
<P>To use <STRONG>FIGlet</STRONG>       with 
its default settings, simply        
       type:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet
</TEXTAREA></P>
<P>and then type whatever you like.</P>
<P>To change the font, use the <STRONG>-f</STRONG> option, 
for example:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet -f script</TEXTAREA></P>
<P>Use the <STRONG>-c</STRONG> option if you would prefer 
centered output:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet -c</TEXTAREA></P>
<P>We have found that the most common use of 
<STRONG>FIGlet</STRONG> is making up large text to be placed in e-mail messages. 
For this reason, <STRONG>FIGlet</STRONG> defaults to 80 column output. If you 
are using a wider terminal, and would like <STRONG>FIGlet</STRONG> to use the 
full width of your terminal, use the <STRONG>-t</STRONG> option:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet -t</TEXTAREA></P>
<P>If you don't want <STRONG>FIGlet</STRONG> to 
<EM>smush</EM> FIGcharacters into each other, use the <STRONG>-k</STRONG> 
option:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet -k</TEXTAREA></P>
<P>If <STRONG>FIGlet</STRONG> gets its input from a file, 
it is often a good idea to use <STRONG>-p</STRONG>:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet -p &lt; myfile</TEXTAREA></P>
<P>Of course, the above can be combined:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" cols=120 readOnly>example&gt; figlet -ptk -f shadow &lt; anotherfile
example&gt; figlet -cf slant
</TEXTAREA></P>
<P>Finally, if you want to have <STRONG>FIGlet</STRONG> 
take the input from the command line instead of a file:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=1 cols=120 readOnly>example&gt; figlet Hello World</TEXTAREA></P>
<H4>Other Things to Try</H4>
<P>On many systems nice effects can be obtained from the 
<STRONG>lean</STRONG> font by piping it through <STRONG>tr</STRONG>, but it 
might be a bit difficult under Windows. If you have an alternative of 
<STRONG>tr</STRONG> under Windows, or just put the following scripts into your 
PowerShell profile:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=31 cols=120 readOnly>function _tr {
	Param(
		[Parameter(ValueFromPipeline=$true,Mandatory=$true)]
		[string] $TargetString,
		[Parameter(Mandatory=$true)]
		[string] $FromString,
		[Parameter(Mandatory=$true)]
		[string] $ToString
	)
	begin {
		$FromStringArray = @();
		$FromStringBytes = [Text.Encoding]::UTF32.GetBytes($FromString);
		for ($i=0; $i -lt $FromStringBytes.length; $i+=4) {
			$FromStringArray += [Text.Encoding]::UTF32.GetString($FromStringBytes, $i, 4);
		}

		$ToStringArray = @();
		$ToStringBytes = [Text.Encoding]::UTF32.GetBytes($ToString);
		for ($i=0; $i -lt $ToStringBytes.length; $i+=4) {
			$ToStringArray += [Text.Encoding]::UTF32.GetString($ToStringBytes, $i, 4);
		}
	}
	process {
		for ($i=0; $i -lt $FromStringArray.Length -and $i -lt $ToStringArray.Length; $i++) {
			$TargetString = $TargetString.Replace($FromStringArray[$i],$ToStringArray[$i]);
		}
		$TargetString
	}
}

Set-Alias tr _tr
</TEXTAREA></P>
<P>Then try the following commands:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=4 cols=120 readOnly>example&gt; figlet -f lean Hello World | tr -FromString ' _/' -ToString ' ()'
example&gt; figlet -f lean Hello World | tr -FromString ' _/' -ToString './\'
example&gt; figlet -f lean Hello World | tr -FromString ' _/' -ToString ' //'
example&gt; figlet -f lean Hello World | tr -FromString ' _/' -ToString '/ \'
</TEXTAREA>
<P>Similar things can be done with the 
<STRONG>block</STRONG> font and many of the other <STRONG>FIGlet</STRONG> fonts.
<H3>COMPRESSED FONTS</H3> 
<P>You can compress the fonts and control files using the 
<STRONG>zip</STRONG> archiving program. Place only one font or control file in 
each archive, and rename the archive file (which will have a name ending in 
".zip") back to ".flf" or ".flc" as the case may be. If you don't rename the 
file appropriately, <STRONG>FIGlet</STRONG> won't be able to find it.</P> 
<P><STRONG>FIGlet</STRONG> does not care what the filename 
within the ".zip" archive is, and will process only the first file.</P> 
<P>The <STRONG>zip</STRONG> format was chosen because tools 
to create and manipulate it are widely available for free on many platforms.</P> 
<H3>THE STANDARD FONTS</H3> 
<P>Here are a few notes about some of the fonts provided 
with <STRONG>FIGlet</STRONG>. You can get many other font from the <A 
href="http://www.figlet.org/">Website</A>. (See 
<STRONG>Where can I get more fonts for FIGlet?</STRONG> in <A 
href="What's_FIGlet_and_FIGlet4Win.htm">What's FIGlet and FIGlet4Win</A>  
       .)</P> 
<P>The font <U>standard</U> is the basic 
<STRONG>FIGlet</STRONG> font, used when no other font is specified. (This 
default can be changed when <STRONG>FIGlet</STRONG> is compiled on your system.) 
The <U>control-files</U> <U>8859-2</U>, <U>8859-3</U>, <U>8859-4</U> and 
<U>8859-9</U> are provided for interpreting those character sets, also known as 
ISO Latin-2 through Latin-5 respectively. The character set <U>8859-1</U> (ISO 
Latin-1) is <STRONG>FIGlet's</STRONG> default and requires no special 
<U>control-file</U>.</P> 
<P>Closely related are the fonts <U>slant</U>, 
<U>shadow</U>, <U>small</U>, <U>smslant</U> (both small and slanted), 
<U>smshadow</U> (both small and shadowed), and <U>big</U>. These fonts support 
only Latin-1, except that <U>big</U> supports Greek FIGcharacters as well; the 
<U>control-files</U> <U>frango</U> (for Greek text written in Latin characters, 
so-called <EM>frangovlakhika</EM>), and <U>8859-7</U> (for mixed Latin/Greek 
text) are provided.</P> 
<P>The <U>ivrit</U> font is a right-to-left font including 
both Latin and Hebrew FIGcharacters; the Latin characters are those of the 
<U>standard</U> font. The available <U>control-files</U> are <U>ilhebrew</U>, 
which maps the letters you get by typing on a U.S. keyboard as if it were a 
Hebrew keyboard; <U>ushebrew</U>, which makes a reasonable mapping from Latin 
letters to Hebrew ones; and <U>8859-8</U>, which supports mixed Latin/Hebrew 
text. <STRONG>WARNING:</STRONG> <STRONG>FIGlet</STRONG> doesn't support 
bidirectional text, so everything will come out right-to-left, even Latin 
letters.</P> 
<P>The fonts <U>terminal</U>, <U>digital</U>, and 
<U>bubble</U> output the input character with some decoration around it ( or no 
decoration, in the case of <U>terminal</U>). The characters coded 128 to 159, 
which have varying interpretations, are output as-is. You can use the 
appropriate <U>control-files</U> to process Latin-2, Latin-3, or Latin-4 (but 
not Latin-5) text, provided your output device has screen or printer fonts that 
are appropriate for these character sets.</P> 
<P>Two script fonts are available: <U>script</U>, which 
larger than <U>standard</U>, and <U>smscript</U>, which is smaller.</P> 
<P>The font <U>lean</U> is made up solely of "/" and "_" 
sub-characters; <U>block</U> is a straight (non-leaning) version of it.</P> 
<P>The font <U>mini</U> is very small, and expecially 
suitable for e-mail signatures.</P> 
<P>The font <U>banner</U> looks like the output of the 
<STRONG>banner</STRONG> program; it is a capitals and small capitals font that 
doesn't support the ISO Latin-1 extensions to plain ASCII. It does, however, 
support the Japanese <U>katakana</U> syllabary; the <U>control-file</U> 
<U>uskata</U> maps the upper-case and lower-case Latin letters into the 48 basic 
<U>katakana</U> characters, and the <U>control-file</U> <U>jis0201</U> handles 
JIS 0201X (JIS-Roman) mixed Latin and <U>katakana</U> text. Furthermore, the 
<U>banner</U> font also supports Cyrillic (Russian) FIGcharacters; the 
<U>control-file</U> <U>8859-5</U> supports mixed Latin and Cyrillic text, the 
<U>control-file</U> <U>koi8r</U> supports the popular KOI8-R mapping of mixed 
text, and the <U>control-file</U> <U>moscow</U> supports a sensible mapping from 
Latin to Cyrillic, compatible with the <U>moscow</U> (not supplied).</P> 
<P>The fonts <U>mnemonic</U> and <U>safemnem</U> support the 
mnemonic character set documented in RFC 1345. They implement a large subset of 
Unicode (over 1800 characters) very crudely, using ASCII-based mnemonic 
sequences, and are good for getting a quick at UTF-8 unicode files, using the 
<U>control-file</U> <U>utf8</U>.</P> 
<H3>ENVIRONMENT</H3> 
<H4>FIGLET_FONTDIR</H4> 
<P>If %<STRONG>FIGLET_FONTDIR</STRONG>% is set in system 
environment variable, its value is used as a path to search for font files.</P> 
<H3>FILES</H3> 
<P>
<TABLE style="BORDER-COLLAPSE: collapse" borderColor=#000000 cellSpacing=0 
cellPadding=2 width="100%" border=1>
  
  <TR>
    <TD>&nbsp;<U>file</U><STRONG>.flf</STRONG></TD>
    <TD> 
  <STRONG>&nbsp;FIGlet</STRONG> font file</TD></TR>
  <TR>
    <TD>&nbsp;<U>file</U><STRONG>.flc</STRONG></TD>
    <TD><STRONG>&nbsp;FIGlet</STRONG> control 
  file</TD></TR></TABLE></P>
<H3>DIAGNOSTICS</H3>
<P><STRONG>FIGlet's</STRONG> diagnostics are intened to be self-explanatory. 
Possible messages are:</P>
<P><TEXTAREA style="OVERFLOW-Y: hidden" rows=7 cols=120 readOnly>Usage: ...
Out of memory
Unable to open font file
Not a FIGlet 2 font file
Unable to open control file
Not a FIGlet 2 control file
"-t" is disabled, since ioctl is not fully implemented.
</TEXTAREA></P>
<P>This last message is printed when the <STRONG>-t</STRONG> 
option is given, but the operating system in use does not include the system 
call <STRONG>FIGlet</STRONG> uses to determine the terminal width.</P>
<P><STRONG>FIGlet</STRONG> also prints an explanatory 
message if the <STRONG>-F</STRONG> option is given on the command line. Ther 
earlier version of <STRONG>FIGlet</STRONG>, version 2.0, listed the available 
fonts when the <STRONG>-F</STRONG> option was given. This option has been 
removed from <STRONG>FIGlet</STRONG> 2.1. It has been replaced by&nbsp;<A 
href="figlist.bat.htm"><STRONG>FIGlist</STRONG></A> script, which is part of the 
standard <STRONG>FIGlet</STRONG> package.</P>
<H3>ORIGIN</H3>
<P><STRONG>FIGlet</STRONG> stands for "Frank, Ian and 
Glenn's LETters". Inspired by Frank's .sig, Glenn wrote (most of) it, and Ian 
helped.</P>
<P>Most of the standard <STRONG>FIGlet</STRONG> fonts were 
inspired by signatures on various UseNet articles. Since typically hundreds of 
people use the same style of letters in their signatures, it was often not 
deemed necessary to give credit to any one font designer.</P>
<H3>BUGS</H3>
<P>Very little error checking is done on font and control 
files. While <STRONG>FIGlet</STRONG> tries to be forgiving of errors, and should 
(hopefully) never actually crash, using an improperly-formatted file with 
<STRONG>FIGlet</STRONG> will produce unpredictable output.</P>
<P><STRONG>FIGlet</STRONG> does not handle format characters 
in a very intelligent way. A tab character is converted to a blank, and 
vertical-tab, from-feed and carriage-return are each converted to a newline. On 
many systems, tabs can be handled better by piping files through 
<STRONG>expand</STRONG> before piping through <STRONG>FIGlet</STRONG>.</P>
<P><STRONG>FIGlet</STRONG> output is quite ugly if it is 
displayed in a proportionally-spaced font. I suppose this is to be expected.</P>
<P>Please report any errors you find in the program and 
this&nbsp;<STRONG>chm</STRONG> file&nbsp;to the <STRONG>FIGlet4Win</STRONG> 
GitHub site (<A 
href="https://github.com/Ace-Radom/figlet4win">https://github.com/Ace-Radom/figlet4win</A>). 
Issues and PRs are always welcome.&nbsp;If it is a bug of the original 
<STRONG>FIGlet</STRONG>, you may also report it to &lt;<A 
href="mailto:info@figlet.org">info@figlet.org</A>&gt;.</P>
<H3>AUTHORS</H3>
<P>FIGlet was written mostly by Glenn Chappell &lt;<A 
href="mailto:c486scm@semovm.semo.edu">c486scm@semovm.semo.edu</A>&gt;, Ian Chai 
&lt;<A href="mailto:ianchai@usa.net">ianchai@usa.net</A>&gt; and has since moved 
on to another FIGlet enthusiast, Christiaan Keet &lt;<A 
href="mailto:info@figlet.org">info@figlet.org</A>&gt;. The latest maintenance is 
conducted by Claudio Matsuoka &lt;<A 
href="mailto:cmatsuoka@gmail.com">cmatsuoka@gmail.com</A>&gt;.</P>
<P>FIGlet4Win is a fork of Claudio's FIGlet tree (<A 
href="https://github.com/cmatsuoka/figlet">https://github.com/cmatsuoka/figlet</A>) 
and maintained by Sichen Lyu &lt;<A 
href="mailto:sichenradomlyu@gmail.com">sichenradomlyu@gmail.com</A>&gt;. Its 
goal is to get FIGlet running on modern Windows just like it used to be.</P>
<P>Sincere thanks to the former developers of FIGlet 
project.</P>
<P>       This manual page is based on the 
original&nbsp;<STRONG>FIGlet</STRONG> man page and mainly&nbsp;written by the 
former <STRONG>FIGlet</STRONG> developers. Some things have been changed by 
Sichen Lyu&nbsp;in order to make it suitable to modern       Windows 
systems.</P></body>
</html>
